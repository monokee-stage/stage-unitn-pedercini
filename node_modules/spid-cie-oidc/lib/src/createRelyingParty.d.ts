import { ConfigurationFacadeOptions } from "./configuration";
import { Tokens } from "./revokeAccessToken";
export declare function createRelyingParty(configurationFacade: ConfigurationFacadeOptions): {
    /**
     * Runs the validation of the configuration.
     */
    validateConfiguration(): Promise<void>;
    retrieveAvailableProviders(): Promise<Record<string, Array<{
        sub: string;
        organization_name: string;
        logo_uri?: string;
    }>>>;
    createEntityConfigurationResponse(): Promise<{
        status: number;
        headers: {
            "Content-Type": string;
        };
        body: string;
    }>;
    createAuthorizationRedirectURL(provider: string): Promise<string>;
    manageCallback(query: {
        code: string;
        state: string;
    } | {
        error: string;
        error_description?: string;
    }): Promise<{
        error: string;
        error_description?: string | undefined;
        type: "authentication-error";
        user_info?: undefined;
        tokens?: undefined;
    } | {
        type: "authentication-success";
        user_info: import("./requestUserInfo").UserInfoCIE | import("./requestUserInfo").UserInfoSPID;
        tokens: Readonly<{
            id_token: string;
            access_token: string;
            refresh_token?: string | undefined;
            revocation_endpoint: string;
        }>;
    }>;
    revokeTokens(tokens: Tokens): Promise<void>;
};
//# sourceMappingURL=createRelyingParty.d.ts.map